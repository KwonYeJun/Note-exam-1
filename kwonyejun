// ! 타입을 확인 하는 모듈
function exampleOne(first, second, dataType) {
  if (typeof first !== dataType && typeof second !== dataType) {
    return new Error(
      `매개변수 first, second는 모두 ${dataType} 타입이어야 합니다.`
    );
  }
}

// ! 짝수인지 홀수인지 확인 하는 모듈
function arrayLengthEven(array) {
  if (array.length % 2 === 0) {
    return true;
  } else {
    return false;
  }
}

// ! 크기를 배교 하는 모듈
function isExampleTwo(first, second) {
  //Guide : exampleOne() 함수를 호출하여 타입검사를 따로 합니다.
  //Guide : 타입검사가 실패하면 에러를 발생시켜 함수가 실행되지 않도록 조칩합니다.

  exampleOne(first, second);

  let booleanResult;
  if (first < second) {
    booleanResult = true;
  } else {
    booleanResult = false;
  }

  if (typeof booleanResult === "boolean") {
    return booleanResult;
  } else {
    return new Error("조건식이 boolean이 아니여서 리턴 하지 못했습니다.");
  }
}

let basicData = [4, 6, 23, 5, 94, 35, 44, 66];

function exampleTree(array, functionOne, functionTwo) {
  // 매개변수 인자로 들어오는 함수 두개는 데이터타입이 모두 함수 여야 한다
  if (typeof functionOne === "function" && typeof functionTwo === "function") {
  } else {
    console.log("function이 아닙니다.");
  }
  // 매개변수 array의 모든 원소는 숫자 정수여야 한다.
  //every() 메서드는 배열 안의 모든 요소가 주어진 판별 함수를 통과하는지 테스트합니다. Boolean 값을 반환합니다.

    if(array.every((test) => {Number.isInteger(test)}) === false){
      console.log('정수 말고 다른 숫자형이 들어가 있습니다.');
    }


  // 매개변수 array의 배열 기일(length)는 짝수여야 하고 홀수라면 10을 추가하여 짝수로 만든다.
  if (arrayLengthEven(array) === false) {
    array.push(10);
  }

  let arryResult = [
    [null, null],
    [null, null],
    [null, null],
    [null, null],
  ];

  // 매개변수 array는 배열의 순서 한장씩 값의 크기를 비교하고
  // 비교한 작은 값은 arrayResult의 원속배열의 0번째
  //큰 값은 arrayResult의 원소배열의 1번째에 넣어준다.

  return arryResult;
}

console.log(exampleTree(basicData, exampleOne, isExampleTwo));
// Q 위의 콘솔을 확인하여 함수 exampleThree()의 리턴값을 통해 재조립된 배열을 만든다.
